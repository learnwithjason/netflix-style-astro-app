---
import { actions } from 'astro:actions';
import { getSubscriberByEmail } from '../../util/convertkit';
import { getPersonById } from '../../util/sanity';
import { getSubscriptionDetails, STRIPE_SUBSCRIPTION_TYPES } from '../../util/stripe';
import Layout from '../../layouts/default.astro';

const user = await Astro.locals.currentUser();

if (!user) {
	throw new Error('not logged in');
}

const stripeSub = await getSubscriptionDetails(user);
const newsletterSubscription = user.primaryEmailAddress ? await getSubscriberByEmail(user.primaryEmailAddress.emailAddress) : null;
const	userDetails = await getPersonById({ user_id: user.id }, { useCdn: false });

if (!userDetails) {
	throw new Error('no user details found')
}

const subscription = user?.publicMetadata.stripe;
const isSubscriber = subscription?.status === 'active';
---

<Layout>
	<main>
		{user ? (
			<section class="user-info">
				<img src={user.imageUrl} alt=`${user.firstName} ${user.lastName}` width="200" height="200" />
				<h1 class="name">{user.firstName} {user.lastName}</h1>

				<>
					{isSubscriber ? (
						<p class="level">{subscription.level}</p>
						<p class="start-date">Supporter since {new Intl.DateTimeFormat('en-US', { dateStyle: 'long'}).format(new Date((stripeSub?.start_date ?? Date.now()) * 1000))}</p>

						<>
							{stripeSub?.cancel_at_period_end && stripeSub.cancel_at ? (
								<p class="cancellation-pending">
									Your subscription has been canceled. Supporter benefits 
									will remain available until 
									{new Intl.DateTimeFormat('en-US', { dateStyle: 'medium' }).format(new Date(stripeSub.cancel_at * 1000))}.
								</p>
							) : null}
						</>

						<form action="/api/stripe/portal" method="POST">
							<input type="hidden" name="customerId" value={subscription.customer} />
							<button>manage your subscription</button>
						</form>
					) : null}

					<a href={`/profile/${user.username}`} class="view-profile">View Your Public Profile</a>
				</>
			</section>
		) : null}

		{!isSubscriber ? (
			<section class="support">
				<h2>Become a supporter</h2>
				<p>
					LWJ isn’t a VC-backed company. We rely on sponsorships and support from people just like you to continue operating. Creating content for developers at the level of quality they deserve isn’t cheap, and the income from your membership helps make new series and formats possible.
				</p>

				<h3>Choose your level of support:</h3>

				<div class="sub-levels">
					{STRIPE_SUBSCRIPTION_TYPES.map((level) => {
						return (
							<div class="sub-level">
								<h3>{level.name}</h3>
								<p>{level.description}</p>

								<>
									{level.prices.map((price) => {
										const formattedPrice = new Intl.NumberFormat(
											'en-US',
											{
												style: 'currency',
												currency: 'USD',
												maximumFractionDigits: 0,
											}
										).format(price.price / 100);

										return (
											<form action="/api/stripe/checkout" method="POST">
												{user?.publicMetadata?.stripe?.customer ? (
													<input type="hidden" name="customerId" value={user.publicMetadata.stripe.customer} />
												) : null}
												<input type="hidden" name="priceId" value={price.priceId} />
												<button>Subscribe {price.period} for {formattedPrice}</button>
											</form>
										)}
									)}
								</>
							</div>
						)}
					)}
				</div>
			</section>
		) : null}

		<section class="details">
			<form method="post" action={actions.user.updateProfile}>
				<legend>Account Details</legend>

				<label for="display_name">Display name</label>
				<input type="text" name="display_name" id="display_name" value={userDetails.name} required />

				<label for="bio">Bio</label>
				<textarea name="bio" id="bio">{userDetails.bio}</textarea>

				<div class="profile-links">
					<h3>Your Links</h3>

					<div class="links">
						{userDetails.links?.map((link, i: number) => (
							<div class="link">
								<label for={`link-label-${i}`}>Label
									<input type="text" name="link_label[]" id={`link-label-${i}`} value={link.label} required />
								</label>

								<label for={`link-url-${i}`}>URL
									<input type="url" name="link_url[]" id={`link-url-${i}`} value={link.url} required />
								</label>

								<button class="remove-link">
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/></svg>
									<span class="sr-only">Delete Link</span>
								</button>
							</div>
						))}
					</div>

					<button id="add-profile-link">+ add a link</button>
				</div>

				<input type="hidden" name="id" value={userDetails._id} />

				<button type="submit">Update Profile</button>
			</form>

			<form method="post" action="/api/newsletter">
				<legend>Newsletter</legend>
				<label>
					<input type="checkbox" checked={newsletterSubscription.state === 'active'} />
					<span>Get new episodes, blog posts, events, and more delivered directly to your inbox</span>
				</label>

				<button type="submit">Update Preferences</button>
			</form>
		</section>
	</main>
</Layout>

<template id="link-template">
	<div class="link">
		<label>Label
			<input type="text" name="link_label[]" required />
		</label>

		<label>URL
			<input type="url" name="link_url[]" required />
		</label>

		<button class="remove-link">
			<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/></svg>
			<span class="sr-only">Delete Link</span>
		</button>
	</div>
</template>

<script>
	// handle removing links
	const removeLinkBtns = document.querySelectorAll('.remove-link');

	function addRemoveHandlers() {
		removeLinkBtns.forEach((btn) => {
			function removeParent(event: Event) {
				event.preventDefault();
				btn.parentElement?.remove();
			}

			btn.removeEventListener('click', removeParent);
			btn.addEventListener('click', removeParent);
		});
	}

	addRemoveHandlers();

	// handle adding additional links
	const linkTemplate = document.querySelector('#link-template') as HTMLTemplateElement;
	const linksContainer = document.querySelector('.links') as HTMLDivElement;
	const addLinkBtn = document.querySelector('#add-profile-link') as HTMLButtonElement;

	function addLink() {
		const link = linkTemplate.content.cloneNode(true);

		linksContainer.appendChild(link);
	}

	addLinkBtn.addEventListener('click', (event) => {
		event.preventDefault();

		addLink();
		addRemoveHandlers();
	});


</script>

<style>
	main {
		font-size: 0.75rem;
		inline-size: min(90dvi, 1080px);
		margin: 3rem auto;
	}

	.user-info {
		aspect-ratio: 1;
		inline-size: 200px;
		margin-block-end: 4rem;
		margin-inline: auto;
		img {
			block-size: auto;
			border: 1px solid var(--gray-600);
			border-radius: 50%;
			display: block;
			inline-size: 100%;
		}

		.name,
		p {
			font-size: 0.75rem;
			text-align: center;

			&.name {
				font-size: 0.875rem;
				font-family: mallory-medium;
				margin-block-start: 0.25rem;
			}

			&.level {
				background: color-mix(in oklch, var(--green-500) 15%, transparent);
				border: 0.5px solid var(--green-500);
				border-radius: 0.125rem;
				inline-size: max-content;
				margin-inline: auto;
				padding-inline: 0.25rem;
			}

			&.start-date {
				color: var(--gray-600);
				font-size: 0.675rem;
				font-style: italic;
				margin-block-start: 0.5rem;
			}

			&.cancellation-pending {
				background: color-mix(in oklch, var(--orange-500) 15%, transparent);
				border: 1px solid var(--orange-500);
				border-radius: 0.125rem;
				color: var(--gray-600);
				font-size: 0.625rem;
				font-style: italic;
				margin-block-start: 0.5rem;
				padding: 0.25rem;
			}
		}
	}

	.view-profile,
	button {
		background: var(--white);
		border: 1px solid var(--gray-400);
		border-radius: 0.125rem;
		color: var(--gray-400);
		display: block;
		font-family: mallory-book;
		font-size: 0.625rem;
		inline-size: 100%;
		margin-block-start: 1rem;
		margin-inline: auto;
		padding: 0.25rem 0.625rem;
		text-align: center;
		text-decoration: none;
		text-transform: lowercase;
	}

	:global(.cl-rootBox) {
		margin-inline: auto;
	}

	.support {
		inline-size: min(90dvi, 660px + 1rem);
		margin: 4rem auto;
		text-align: center;

		h2 {
			font-size: 1.5rem;
		}

		p {
			font-size: 0.875rem;
			margin-block-start: 0.5rem;
			margin-inline: auto;
			max-inline-size: 54ch;
		}

		h3 {
			font-size: 1.25rem;
			margin-block-start: 2rem;
		}

		.sub-levels {
			display: flex;
			flex-wrap: wrap;
			gap: 0.5rem;
			margin-block-start: 0.5rem;
		}

		.sub-level {
			background: var(--gray-000);
			border: 1px solid var(--gray-200);
			border-radius: 0.25rem;
			display: flex;
			flex-direction: column;
			gap: 0.75rem;
			inline-size: 220px;
			padding: 0.75rem;
			text-align: left;

			&:has(button:hover, button:active, button:focus) {
				background: var(--indigo-100);
			}

			h3 {
				font-family: mallory-medium;
				font-size: 0.875rem;
				line-height: 1.1;
				margin-block: 0;
			}

			p {
				font-size: 0.75rem;
				margin-block: 0;
			}

			form {
				margin-block-start: auto;
			}

			button {
				background: var(--indigo-100);
				border-color: var(--indigo-500);
				margin-block-start: 0;

				&:is(:hover, :active, :focus) {
					background: var(--indigo-500);
					color: var(--white);
				}
			}
		}
	}

	.details {
		form {
			inline-size: min(90dvi, 400px);
			margin: 4rem auto;

			legend {
				font-size: 1rem;
				margin: 0 0 0.5rem;
				padding: 0;
			}

			:is(label, input:not([type=checkbox]), textarea, button) {
				display: block;
				inline-size: 100%;
			}

			:is(input:not([type=checkbox]), textarea, button) {
				background: var(--white);
				border: 1px solid var(--gray-400);
				border-radius: 0.125rem;
				font-family: mallory-book;
				font-size: 16px;
				padding: 0.25rem;
			}

			label {
				margin-block-end: 0.125rem;
			}

			textarea {
				block-size: calc(4 * 1.45rem);
				field-sizing: content;
			}

			:is(input, textarea) {
				color: var(--text);
				margin-block-end: 0.5rem;
			}

			.profile-links {
				margin-block-end: 1.5rem;

				h3 {
					color: var(--text);
					font-family: mallory-book;
					line-height: 1.1;
					margin-block: 2rem 0.25rem;
				}
			}

			.link {
				align-items: end;
				display: grid;
				grid-template-columns: 120px auto 2rem;
				gap: 0.5rem;
				margin-block-start: 1rem;
			}

			button.remove-link {
				align-items: center;
				border: none;
				block-size: 1.875rem;
				display: flex;
				justify-content: center;
				margin-block-end: 0.625rem;
			}
		}
	}

	#add-profile-link {
		border: none;
		color: var(--text-muted);
		text-align: start;
	}
</style>
