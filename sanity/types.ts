/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Person = {
  _id: string
  _type: 'person'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  photo?: CloudinaryAsset
  bio?: string
  links?: Array<{
    label?: string
    url?: string
    _type: 'link'
    _key: string
  }>
}

export type Episode = {
  _id: string
  _type: 'episode'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  publish_date?: string
  video?: {
    mux_video?: MuxVideo
    captions?: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
      }
      _type: 'file'
    }
    youtube_id?: string
    thumbnail?: CloudinaryAsset
    thumbnail_alt?: string
    transcript?: string
  }
  people?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'person'
  }>
  description?: string
  resources?: Array<{
    label?: string
    url?: string
    _type: 'resource'
    _key: string
  }>
  hidden?: boolean
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type Collection = {
  _id: string
  _type: 'collection'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  release_year?: string
  series?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'series'
  }
  episodes?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'episode'
  }>
}

export type Series = {
  _id: string
  _type: 'series'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  image?: CloudinaryAsset
  description?: string
  collections?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'collection'
  }>
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type MuxVideo = {
  _type: 'mux.video'
  asset?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'mux.videoAsset'
  }
}

export type MuxVideoAsset = {
  _type: 'mux.videoAsset'
  status?: string
  assetId?: string
  playbackId?: string
  filename?: string
  thumbTime?: number
  data?: MuxAssetData
}

export type MuxAssetData = {
  _type: 'mux.assetData'
  resolution_tier?: string
  upload_id?: string
  created_at?: string
  id?: string
  status?: string
  max_stored_resolution?: string
  passthrough?: string
  encoding_tier?: string
  master_access?: string
  aspect_ratio?: string
  duration?: number
  max_stored_frame_rate?: number
  mp4_support?: string
  max_resolution_tier?: string
  tracks?: Array<
    {
      _key: string
    } & MuxTrack
  >
  playback_ids?: Array<
    {
      _key: string
    } & MuxPlaybackId
  >
  static_renditions?: MuxStaticRenditions
}

export type MuxStaticRenditions = {
  _type: 'mux.staticRenditions'
  status?: string
  files?: Array<
    {
      _key: string
    } & MuxStaticRenditionFile
  >
}

export type MuxStaticRenditionFile = {
  _type: 'mux.staticRenditionFile'
  ext?: string
  name?: string
  width?: number
  bitrate?: number
  filesize?: number
  height?: number
}

export type MuxPlaybackId = {
  _type: 'mux.playbackId'
  id?: string
  policy?: string
}

export type MuxTrack = {
  _type: 'mux.track'
  id?: string
  type?: string
  max_width?: number
  max_frame_rate?: number
  duration?: number
  max_height?: number
}

export type CloudinaryAssetContextCustom = {
  _type: 'cloudinary.assetContextCustom'
  alt?: string
  caption?: string
}

export type CloudinaryAssetDerived = {
  _type: 'cloudinary.assetDerived'
  raw_transformation?: string
  url?: string
  secure_url?: string
}

export type CloudinaryAsset = {
  _type: 'cloudinary.asset'
  public_id?: string
  resource_type?: string
  type?: string
  format?: string
  version?: number
  url?: string
  secure_url?: string
  width?: number
  height?: number
  bytes?: number
  duration?: number
  tags?: Array<string>
  created_at?: string
  derived?: Array<
    {
      _key: string
    } & CloudinaryAssetDerived
  >
  access_mode?: string
  context?: CloudinaryAssetContext
}

export type CloudinaryAssetContext = {
  _type: 'cloudinary.assetContext'
  custom?: CloudinaryAssetContextCustom
}

export type Markdown = string

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Person
  | Episode
  | SanityFileAsset
  | SanityAssetSourceData
  | Collection
  | Series
  | Slug
  | MuxVideo
  | MuxVideoAsset
  | MuxAssetData
  | MuxStaticRenditions
  | MuxStaticRenditionFile
  | MuxPlaybackId
  | MuxTrack
  | CloudinaryAssetContextCustom
  | CloudinaryAssetDerived
  | CloudinaryAsset
  | CloudinaryAssetContext
  | Markdown
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ../src/util/sanity.ts
// Variable: allSeriesQuery
// Query:   *[_type=="series"] {    title,    'slug': slug.current,    description,    image {      public_id,      height,      width,    },    collections[]->{      title,      'slug': slug.current,      release_year,    }  }
export type AllSeriesQueryResult = Array<{
  title: string | null
  slug: string | null
  description: string | null
  image: {
    public_id: string | null
    height: number | null
    width: number | null
  } | null
  collections: Array<{
    title: string | null
    slug: string | null
    release_year: string | null
  }> | null
}>
